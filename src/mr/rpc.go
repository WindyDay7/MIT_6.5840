package mr

//
// RPC definitions.
//
// remember to capitalize all names.
//

import (
	"os"
	"strconv"
)

// RequestTaskArgs, Worker ask for task from Master
type RequestTaskArgs struct {
	WorkerID int
}

// RequestTaskReply is the reply structure for the RequestTask RPC.
type RequestTaskReply struct {
	TaskID   int
	NReduce  int    // Number of reduce tasks
	TaskType string // "Map" or "Reduce"
	// For Map, FileNames are the files name of an as-yet-unstarted map task.
	// For Reduce Task, Filenames are the intermediate files of the completed map tasks.
	FileName string
}

// Worker will notify the Master after completing the Task, if it doesn't reply in time,
// the Master will mark the Task as Failed and reissue the Task.
type ReportTaskArgs struct {
	WorkerID          int
	TaskID            int
	Status            string   // "Completed" or "Failed"
	TaskType          string   // "Map" or "Reduce"
	IntermediateFiles []string // For Map tasks, the intermediate files generated by the Map phase
}

type ReportTaskReply struct {
	Success bool
}

// Cook up a unique-ish UNIX-domain socket name in /var/tmp, for the coordinator.
// Can't use the current directory since Athena AFS doesn't support UNIX-domain sockets.
func coordinatorSock() string {
	s := "/var/tmp/5840-mr-"
	s += strconv.Itoa(os.Getuid())
	return s
}
